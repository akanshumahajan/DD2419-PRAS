#!/usr/bin/env python

import sys
import math
import json

import rospy
import tf2_ros 
from tf.transformations import quaternion_from_euler
from geometry_msgs.msg import TransformStamped, Vector3

def transform_from_marker(m):
    t = TransformStamped()
    t.header.frame_id = 'map'
    t.child_frame_id = 'aruco/marker' + str(m['id'])
    t.transform.translation = Vector3(*m['pose']['position'])
    roll, pitch, yaw = m['pose']['orientation']
    (t.transform.rotation.x,
     t.transform.rotation.y,
     t.transform.rotation.z,
     t.transform.rotation.w) = quaternion_from_euler(math.radians(roll),
                                                     math.radians(pitch),
                                                     math.radians(yaw))
    return t

def main(argv=sys.argv):
    # Let ROS filter through the arguments
    args = rospy.myargv(argv=argv)

    # Load world JSON
    with open(args[1], 'rb') as f:
        world = json.load(f)

    # Create a transform for each marker
    transforms = [transform_from_marker(m) for m in world['markers']]

    # Publish these transforms statically forever
    rospy.init_node('displaymapmarkers')
    broadcaster = tf2_ros.StaticTransformBroadcaster()
    broadcaster.sendTransform(transforms)
    rospy.spin()

if __name__ == "__main__":
    main()


# import sys
# import math
# import json

# import rospy
# import tf2_ros 
# from tf.transformations import quaternion_from_euler
# from geometry_msgs.msg import TransformStamped, Vector3
# from geometry_msgs.msg import PoseStamped, TransformStamped


# def transform_from_marker(m):
#     #print("m is", m)
#     t = TransformStamped()
#     t.header.frame_id = 'map'
#     t.child_frame_id = 'aruco/marker' + str(m['id'])
#     t.transform.translation = Vector3(*m['pose']['position'])
#     roll, pitch, yaw = m['pose']['orientation']
#     (t.transform.rotation.x,
#      t.transform.rotation.y,
#      t.transform.rotation.z,
#      t.transform.rotation.w) = quaternion_from_euler(math.radians(roll),
#                                                      math.radians(pitch),
#                                                      math.radians(yaw))
#     return t

# def map_pose_pub(m):
#     tfBuffer = tf2_ros.Buffer()
#     listener = tf2_ros.TransformListener(tfBuffer)
#     rospy.sleep(2)

#     pub = PoseStamped()
#     pub.header.frame_id = 'map'
#     trans = None
#     target_frame = 'aruco/marker' + str(m['id'])
#     try:
#         trans = tfBuffer.lookup_transform('map', target_frame,rospy.Time(0), rospy.Duration(1.0))
#     except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
#         #trans = self.tfBuffer.lookup_transform(self.map_frame, self.est_veh_pose_frame, rospy.Time(0), rospy.Duration(1.0))
#         rospy.loginfo('Failure of lookup transfrom from estimated vehicle pose to map')
#     if trans:
#         pub.header.stamp = rospy.Time.now()
#         pub.pose.position = trans.transform.translation
#         pub.pose.orientation = trans.transform.rotation

#         #print (pub)
#         return pub



# def main(argv=sys.argv):

#     posepub = rospy.Publisher('aruco_map_pose', PoseStamped, queue_size=10)

#     # Let ROS filter through the arguments
#     args = rospy.myargv(argv=argv)

#     # Load world JSON
#     with open(args[1], 'rb') as f:
#         world = json.load(f)

#     # Create a transform for each marker
#     transforms = [transform_from_marker(m) for m in world['markers']]

#     # Publish these transforms statically forever
#     rospy.init_node('displaymapmarkers')
#     broadcaster = tf2_ros.StaticTransformBroadcaster()
#     broadcaster.sendTransform(transforms)

#     rate = rospy.Rate(10.0)

#     #while not rospy.is_shutdown():

#     for m in world['markers']:
#         #    transforms = [transform_from_marker(m)]
#         pub = map_pose_pub(m)
            
#         posepub.publish(pub)            

    
#     rospy.spin()   
#     #rate.sleep()

# if __name__ == "__main__":
#     main()
